name: PHP Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: PHP Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, dom, fileinfo, mysql, pdo, pdo_mysql, sqlite, pdo_sqlite, zip, curl, json, openssl, tokenizer
        coverage: xdebug
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: composer-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Create environment file
      run: |
        cp .env.example .env.testing
        echo "APP_ENV=testing" >> .env.testing
        echo "DB_CONNECTION=sqlite" >> .env.testing
        echo "DB_DATABASE=:memory:" >> .env.testing
        echo "CACHE_DRIVER=array" >> .env.testing
        echo "SESSION_DRIVER=array" >> .env.testing
    
    - name: Create storage directories
      run: |
        mkdir -p storage/logs
        mkdir -p storage/cache
        mkdir -p storage/sessions
        mkdir -p storage/coverage
    
    - name: Run PHPUnit tests
      run: |
        vendor/bin/phpunit --coverage-clover=storage/coverage/clover.xml --coverage-html=storage/coverage
    
    - name: Run tests with coverage
      if: matrix.php-version == '8.3'
      run: |
        vendor/bin/phpunit --coverage-text --coverage-clover=storage/coverage/clover.xml
    
    - name: Upload coverage to Codecov
      if: matrix.php-version == '8.3'
      uses: codecov/codecov-action@v3
      with:
        file: storage/coverage/clover.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage reports
      if: matrix.php-version == '8.3'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: storage/coverage/
    
    - name: Run security check
      run: |
        composer audit
    
    - name: Check code style
      run: |
        vendor/bin/phpcs --standard=PSR12 app/ tests/ --ignore=vendor/
      continue-on-error: true

  test-database:
    name: Database Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, dom, fileinfo, mysql, pdo, pdo_mysql, sqlite, pdo_sqlite, zip, curl, json, openssl, tokenizer
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Create environment file for MySQL
      run: |
        cp .env.example .env.testing
        echo "APP_ENV=testing" >> .env.testing
        echo "DB_CONNECTION=mysql" >> .env.testing
        echo "DB_HOST=127.0.0.1" >> .env.testing
        echo "DB_PORT=3306" >> .env.testing
        echo "DB_DATABASE=test_db" >> .env.testing
        echo "DB_USERNAME=root" >> .env.testing
        echo "DB_PASSWORD=password" >> .env.testing
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -ppassword --silent; do
          echo "Waiting for MySQL..."
          sleep 1
        done
    
    - name: Run database tests
      run: |
        vendor/bin/phpunit tests/Feature/ --group=database

  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: mbstring, dom, fileinfo, mysql, pdo, pdo_mysql, sqlite, pdo_sqlite, zip, curl, json, openssl, tokenizer
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Run PHP CS Fixer
      run: |
        vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
      continue-on-error: true
    
    - name: Run PHPStan
      run: |
        vendor/bin/phpstan analyse app/ tests/ --level=5
      continue-on-error: true
